# check_tg.py
import os
import asyncio
from datetime import datetime, timezone
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import ChannelPrivateError, ChatAdminRequiredError, UsernameInvalidError, UsernameNotOccupiedError
from dotenv import load_dotenv

load_dotenv()

API_ID = int(os.environ.get("TELEGRAM_API_ID", "0"))
API_HASH = os.environ.get("TELEGRAM_API_HASH")
STRING_SESSION = os.environ.get("TELEGRAM_STRING_SESSION")

# ---- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ----
API_ID = int(os.environ.get("TELEGRAM_API_ID", "0"))
API_HASH = os.environ.get("TELEGRAM_API_HASH")
STRING_SESSION = os.environ.get("TELEGRAM_STRING_SESSION")

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
TG_CHANNELS = [
    "wearfeelings",
    "devilwearshandm",
    "theblueprintnews",
    "goldchihuahua",
    "fashion_mur",
]


def short(s: str, n: int = 100) -> str:
    s = (s or "").strip().replace("\n", " ")
    return (s[: n - 1] + "‚Ä¶") if len(s) > n else s


async def check_channel(client: TelegramClient, uname: str):
    print(f"\n‚Äî @{uname}")
    try:
        entity = await client.get_entity(uname)
    except UsernameInvalidError:
        print("  ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–ø—Ä–æ–≤–µ—Ä—å @username).")
        return
    except UsernameNotOccupiedError:
        print("  ‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø–æ —Ç–∞–∫–æ–º—É @username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except ChannelPrivateError:
        print("  üö´ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º (STRING_SESSION).")
        return
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏
    subscribed = True
    try:
        me = await client.get_me()
        perms = await client.get_permissions(entity, me)
        # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ; –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    except Exception:
        subscribed = False

    print(f"  –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –¥–∞' if subscribed else '‚ùå –Ω–µ—Ç'}")

    # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    msgs = []
    try:
        async for m in client.iter_messages(entity, limit=5):
            msgs.append(m)
    except ChatAdminRequiredError:
        print("  üö´ –ù–µ—Ç –ø—Ä–∞–≤ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
        return
    except ChannelPrivateError:
        print("  üö´ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
        return
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return

    if not msgs:
        print("  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("     ‚Ä¢ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π.")
        print("     ‚Ä¢ –í API –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        print("     ‚Ä¢ –í –∫–∞–Ω–∞–ª–µ –Ω–µ –±—ã–ª–æ –ø–æ—Å—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.")
        return

    for m in reversed(msgs):
        dt = m.date
        # –ø–æ–∫–∞–∂–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if dt and dt.tzinfo is not None:
            dt = dt.astimezone().replace(tzinfo=None)
        link = f"https://t.me/{uname}/{m.id}"
        head = (m.message or "").strip().split("\n", 1)[0]
        print(f"  ‚Ä¢ {dt:%Y-%m-%d %H:%M} ‚Äî {short(head, 90)}")
        print(f"    {link}")


async def main():
    if not (API_ID and API_HASH and STRING_SESSION):
        print("‚ùå –í .env –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_STRING_SESSION")
        return
    async with TelegramClient(StringSession(STRING_SESSION), API_ID, API_HASH) as client:
        me = await client.get_me()
        print(
            f"–í–æ—à–ª–∏ –∫–∞–∫: {me.first_name or ''} {me.last_name or ''} (@{me.username or '‚Äî'})")
        for uname in TG_CHANNELS:
            await check_channel(client, uname)

if __name__ == "__main__":
    asyncio.run(main())
